////////////////////////////////////////////////////////////////////////////////
//
//  ADOBE SYSTEMS INCORPORATED
//  Copyright 2005-2007 Adobe Systems Incorporated
//  All Rights Reserved.
//
//  NOTICE: Adobe permits you to use, modify, and distribute this file
//  in accordance with the terms of the license agreement accompanying it.
//
////////////////////////////////////////////////////////////////////////////////

package app.utils
{
	
	import flash.utils.Dictionary;
	
	/**
	 *  为对象生成唯一UID
	 *  The UIDUtil class is an all-static class
	 *  with methods for working with UIDs (unique identifiers) within Flex.
	 *  You do not create instances of UIDUtil;
	 *  instead you simply call static methods such as the
	 *  <code>UIDUtil.createUID()</code> method.
	 * 
	 *  <p><b>Note</b>: If you have a dynamic object that has no [Bindable] properties 
	 *  (which force the object to implement the IUID interface), Flex  adds an 
	 *  <code>mx_internal_uid</code> property that contains a UID to the object. 
	 *  To avoid having this field 
	 *  in your dynamic object, make it [Bindable], implement the IUID interface
	 *  in the object class, or set a <coded>uid</coded> property with a value.</p>
	 *  
	 *  @langversion 3.0
	 *  @playerversion Flash 9
	 *  @playerversion AIR 1.1
	 *  @productversion Flex 3
	 */
	public class UIDUtil
	{
		
		//--------------------------------------------------------------------------
		//
		//  Class constants
		//
		//--------------------------------------------------------------------------
		
		/**
		 *  @private
		 *  Char codes for 0123456789ABCDEF
		 */
		private static const ALPHA_CHAR_CODES:Array = [48, 49, 50, 51, 52, 53, 54, 
			55, 56, 57, 65, 66, 67, 68, 69, 70];
		
		//--------------------------------------------------------------------------
		//
		//  Class variables
		//
		//--------------------------------------------------------------------------
		
		/** 
		 *  This Dictionary records all generated uids for all existing items.
		 *  
		 *  @langversion 3.0
		 *  @playerversion Flash 9
		 *  @playerversion AIR 1.1
		 *  @productversion Flex 3
		 */
		private static var uidDictionary:Dictionary = new Dictionary(true);
		
		//--------------------------------------------------------------------------
		//
		//  Class methods
		//
		//--------------------------------------------------------------------------
		
		/**
		 *  Generates a UID (unique identifier) based on ActionScript's
		 *  pseudo-random number generator and the current time.
		 *
		 *  <p>The UID has the form
		 *  <code>"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"</code>
		 *  where X is a hexadecimal digit (0-9, A-F).</p>
		 *
		 *  <p>This UID will not be truly globally unique; but it is the best
		 *  we can do without player support for UID generation.</p>
		 *
		 *  @return The newly-generated UID.
		 *  
		 *  @langversion 3.0
		 *  @playerversion Flash 9
		 *  @playerversion AIR 1.1
		 *  @productversion Flex 3
		 */
		public static function createUID():String
		{
			var uid:Array = new Array(36);
			var index:int = 0;
			
			var i:int;
			var j:int;
			
			for (i = 0; i < 8; i++)
			{
				uid[index++] = ALPHA_CHAR_CODES[Math.floor(Math.random() *  16)];
			}
			
			for (i = 0; i < 3; i++)
			{
				uid[index++] = 45; // charCode for "-"
				
				for (j = 0; j < 4; j++)
				{
					uid[index++] = ALPHA_CHAR_CODES[Math.floor(Math.random() *  16)];
				}
			}
			
			uid[index++] = 45; // charCode for "-"
			
			var time:Number = new Date().getTime();
			// Note: time is the number of milliseconds since 1970,
			// which is currently more than one trillion.
			// We use the low 8 hex digits of this number in the UID.
			// Just in case the system clock has been reset to
			// Jan 1-4, 1970 (in which case this number could have only
			// 1-7 hex digits), we pad on the left with 7 zeros
			// before taking the low digits.
			var timeString:String = ("0000000" + time.toString(16).toUpperCase()).substr(-8);
			
			for (i = 0; i < 8; i++)
			{
				uid[index++] = timeString.charCodeAt(i);
			}
			
			for (i = 0; i < 4; i++)
			{
				uid[index++] = ALPHA_CHAR_CODES[Math.floor(Math.random() *  16)];
			}
			
			return String.fromCharCode.apply(null, uid);
		}
		
		/**
		 * A utility method to check whether a String value represents a 
		 * correctly formatted UID value. UID values are expected to be 
		 * in the format generated by createUID(), implying that only
		 * capitalized A-F characters in addition to 0-9 digits are
		 * supported.
		 * 
		 * @param uid The value to test whether it is formatted as a UID.
		 * 
		 * @return Returns true if the value is formatted as a UID.
		 *  
		 *  @langversion 3.0
		 *  @playerversion Flash 9
		 *  @playerversion AIR 1.1
		 *  @productversion Flex 3
		 */
		public static function isUID(uid:String):Boolean
		{
			if (uid != null && uid.length == 36)
			{
				for (var i:uint = 0; i < 36; i++)
				{
					var c:Number = uid.charCodeAt(i);
					
					// Check for correctly placed hyphens
					if (i == 8 || i == 13 || i == 18 || i == 23)
					{
						if (c != 45)
						{
							return false;
						}
					}
						// We allow capital alpha-numeric hex digits only
					else if (c < 48 || c > 70 || (c > 57 && c < 65))
					{
						return false;
					}
				}
				
				return true;
			}
			
			return false;
		}
		
		/**
		 *  Returns the UID (unique identifier) for the specified object.
		 *  If the specified object doesn't have an UID
		 *  then the method assigns one to it.
		 *  If a map is specified this method will use the map
		 *  to construct the UID.
		 *  As a special case, if the item passed in is null,
		 *  this method returns a null UID.
		 *  
		 *  @param item Object that we need to find the UID for.
		 *
		 *  @return The UID that was either found or generated.
		 *  
		 *  @langversion 3.0
		 *  @playerversion Flash 9
		 *  @playerversion AIR 1.1
		 *  @productversion Flex 3
		 */
		public static function getUID(item:Object):String
		{
			var result:String = null;
			
			if (item == null)
				return result;
			
			if ("uid" in item)
				return item.uid;
			
			result = uidDictionary[item];
			
			if (!result)
			{
				result = createUID();

				uidDictionary[item] = result;
				
			}
			return result;
		}
	}
	
}
